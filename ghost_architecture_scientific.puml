@startuml Ghost_System_Architecture

!theme aws-orange
skinparam backgroundColor #1E1E1E
skinparam classBackgroundColor #2D2D30
skinparam classBorderColor #007ACC
skinparam classHeaderBackgroundColor #007ACC
skinparam noteBackgroundColor #2D2D30
skinparam noteBorderColor #FFCC00

title Ghost System Architecture - Scientific Documentation

package "Core Architecture" {
    abstract Entity {
        # x, y : int
        # speed : float
        # dirX, dirY : int
        + move() : void
        + {abstract} draw(tileSize : int) : void
        + getX(), getY() : int
        # handleTunnelWrap(mapWidth : int) : void
    }

    abstract Ghostbase {
        # state : GhostState
        # stateTimer : float
        # moveTimer : float
        # normalColor : Color
        # frightenedColor : Color
        # mapRef : Map&
        # spawnX, spawnY : int
        
        + {abstract} getTargetTile(pacmanPos : Vector2&) : Vector2
        + {abstract} getScatterTarget() : Vector2
        + update(deltaTime : float, pacmanPos : Vector2&, map : Map&) : void
        + setFrightened(on : bool) : void
        + canBeEaten() : bool
        + getEaten() : void
        # changeState(newState : GhostState) : void
        # chooseDirectionTowards(target : Vector2&) : Vector2
        - randomTile() : Vector2
    }

    enum GhostState {
        IN_BASE
        SCATTER
        CHASE
        FRIGHTENED
        EATEN
    }
}

package "Concrete Implementations" {
    class RedGhost {
        + RedGhost(map : Map&, startX : int, startY : int, speed : float)
        + getTargetTile(pacmanPos : Vector2&) : Vector2
        + getScatterTarget() : Vector2
        --
        **Behavior:** Direct Chase
        **Target:** Pac-Man position
        **Scatter Corner:** Top-Right (18,2)
    }

    class PinkGhost {
        + PinkGhost(map : Map&, startX : int, startY : int, speed : float)
        + getTargetTile(pacmanPos : Vector2&) : Vector2
        + getScatterTarget() : Vector2
        --
        **Behavior:** Ambush (4 tiles ahead)
        **Target:** Predictive positioning
        **Scatter Corner:** Top-Left (2,2)
    }

    class GreenGhost {
        + GreenGhost(map : Map&, startX : int, startY : int, speed : float)
        + getTargetTile(pacmanPos : Vector2&) : Vector2
        + getScatterTarget() : Vector2
        --
        **Behavior:** Patrol strategy
        **Target:** Zone-based movement
        **Scatter Corner:** Bottom-Left (2,18)
    }

    class BlueGhost {
        + BlueGhost(map : Map&, startX : int, startY : int, speed : float)
        + getTargetTile(pacmanPos : Vector2&) : Vector2
        + getScatterTarget() : Vector2
        --
        **Behavior:** Complex algorithm
        **Target:** Distance-dependent strategy
        **Scatter Corner:** Bottom-Right (18,18)
    }
}

package "Game Integration" {
    class Game {
        - redGhost : RedGhost*
        - pinkGhost : PinkGhost*
        - greenGhost : GreenGhost*
        - blueGhost : BlueGhost*
        - ghostEatenCount : int
        
        + ghostCollision() : void
        - update() : void
        - handleInput() : void
    }

    class Map {
        + isWalkable(x : int, y : int) : bool
        + hasPowerUp(x : int, y : int) : bool
        + getWidth(), getHeight() : int
    }

    class PacMan {
        + justAtePowerUp() : bool
        + getX(), getY() : int
        + addScore(points : int) : void
    }
}

' Inheritance relationships
Entity <|-- Ghostbase : **Template Method Pattern**
Ghostbase <|-- RedGhost : **Strategy Pattern**
Ghostbase <|-- PinkGhost : **Strategy Pattern**
Ghostbase <|-- GreenGhost : **Strategy Pattern**
Ghostbase <|-- BlueGhost : **Strategy Pattern**

' Composition relationships
Game *-- RedGhost : manages
Game *-- PinkGhost : manages
Game *-- GreenGhost : manages
Game *-- BlueGhost : manages
Game --> Map : uses
Game --> PacMan : interacts

' Usage relationships
Ghostbase --> GhostState : **State Machine Pattern**
Ghostbase --> Map : references
Ghostbase ..> PacMan : collision detection

' Design Pattern Annotations
note top of Ghostbase : **Template Method Pattern**\nDefines algorithm skeleton in base class\nwith customizable steps in derived classes\n\n**State Machine Pattern**\nManages ghost behavior states\nwith timer-based transitions\n\n**Strategy Pattern**\nInterchangeable targeting algorithms\nper ghost type

note right of Game : **Collision System**\n• Tile-based position checking\n• State-dependent behavior\n• Progressive scoring (200, 400, 800, 1600)\n• Power-up triggered frightened mode

note bottom of GhostState : **State Transitions:**\nIN_BASE (2s) → SCATTER (7s) ↔ CHASE (20s)\nAny state → FRIGHTENED (Power-up)\nFRIGHTENED → SCATTER (10s timeout)\nFRIGHTENED → IN_BASE (eaten by Pac-Man)

@enduml
