@startuml Pac-Man_Class_Diagram

!theme aws-orange
skinparam backgroundColor #1E1E1E
skinparam classBackgroundColor #2D2D30
skinparam classBorderColor #007ACC
skinparam classHeaderBackgroundColor #007ACC
skinparam classAttributeFontColor #DCDCDC
skinparam classStereotypeFontColor #569CD6
skinparam arrowColor #FFCC00

title Pac-Man Game - Class Diagram

' Enums
enum GameState {
    MENU
    HOWTO
    PLAYING
    GAMEOVER
    ENTERNAME
    LEADERBOARD
}

enum TileType {
    WALL
    EMPTY
    COIN
    POWERUP
    FRUIT
}

enum GhostState {
    IN_BASE
    SCATTER
    CHASE
    FRIGHTENED
    EATEN
}

' Abstract Base Classes
abstract class Entity {
    # x : int
    # y : int
    # speed : float
    # dirX : int
    # dirY : int
    
    + Entity(x : int, y : int, speed : float, dirX : float, dirY : float)
    + {abstract} draw(tileSize : int) : void
    + move() : void
    + setDirection(dx : int, dy : int) : void
    + setSpeed(speed : int) : void
    + getX() : int
    + getY() : int
    + getSpeed() : int
    + getDirX() : int
    + getDirY() : int
    # handleTunnelWrap(mapWidth : int) : void
}

' Core Game Classes
class Game {
    - mapWidth : int
    - mapHeight : int
    - tileSize : int
    - menu : Menu
    - map : Map
    - pacman : PacMan
    - redGhost : RedGhost*
    - pinkGhost : PinkGhost*
    - greenGhost : GreenGhost*
    - blueGhost : BlueGhost*
    - leaderboard : Leaderboard
    - state : GameState
    - deltaTime : float
    - playerName : string
    - maxNameLength : int
    - pacmanSpeed : float
    - ghostSpeed : float
    - ghostEatenCount : int
    
    + Game(width : int, height : int, tileSize : int)
    + ~Game()
    + run() : void
    + ghostCollision() : void
    - handleInput() : void
    - update() : void
    - draw(dt : float) : void
}

class Map {
    - width : int
    - height : int
    - tileSize : int
    - grid : vector<vector<TileType>>
    - fruitTimer : float
    - fruitSpawnInterval : float
    - rng : mt19937
    
    + Map(width : int, height : int, tileSize : int)
    + update(deltaTime : float) : void
    + draw() : void
    + isWalkable(x : int, y : int) : bool
    + hasItem(x : int, y : int) : bool
    + collectItem(x : int, y : int) : int
    + allCoinsCollected() : bool
    + hasFruit(x : int, y : int) : bool
    + hasPowerUp(x : int, y : int) : bool
    + getWidth() : int
    + getHeight() : int
    - loadLayout() : void
    - spawnFruit() : void
}

class PacMan {
    - desiredDirX : int
    - desiredDirY : int
    - score : int
    - moveTimer : float
    - moveInterval : float
    - fruitEaten : bool
    - powerUpEaten : bool
    
    + PacMan(startX : int, startY : int, speed : float)
    + update(map : Map&, deltaTime : float) : void
    + draw(tileSize : int) : void
    + setDesiredDirection(dx : int, dy : int) : void
    + addScore(points : int) : void
    + getScore() : int
    + justAteFruit() : bool
    + justAtePowerUp() : bool
}

' Ghost Base Class
abstract class Ghostbase {
    # normalColor : Color
    # frightenedColor : Color
    # eatenColor : Color
    # radius : float
    # state : GhostState
    # stateTimer : float
    # moveTimer : float
    # moveInterval : float
    # mapRef : Map&
    # spawnX : int
    # spawnY : int
    - rng : mt19937
    
    + Ghostbase(map : Map&, startX : int, startY : int, speed : float)
    + {abstract} getTargetTile(pacmanPos : Vector2&) : Vector2
    + {abstract} getScatterTarget() : Vector2
    + update(deltaTime : float, pacmanPos : Vector2&, map : Map&) : void
    + draw(tileSize : int) : void
    + setFrightened(on : bool) : void
    + getEaten() : void
    + canBeEaten() : bool
    + isEaten() : bool
    + isFrightened() : bool
    + reset() : void
    + resetPosition(x : int, y : int) : void
    # changeState(newState : GhostState) : void
    # chooseDirectionTowards(target : Vector2&) : Vector2
    - randomTile() : Vector2
}

' Specific Ghost Classes
class RedGhost {
    + RedGhost(map : Map&, startX : int, startY : int, speed : float)
    + getTargetTile(pacmanPos : Vector2&) : Vector2
    + getScatterTarget() : Vector2
}

class PinkGhost {
    + PinkGhost(map : Map&, startX : int, startY : int, speed : float)
    + getTargetTile(pacmanPos : Vector2&) : Vector2
    + getScatterTarget() : Vector2
}

class GreenGhost {
    + GreenGhost(map : Map&, startX : int, startY : int, speed : float)
    + getTargetTile(pacmanPos : Vector2&) : Vector2
    + getScatterTarget() : Vector2
}

class BlueGhost {
    + BlueGhost(map : Map&, startX : int, startY : int, speed : float)
    + getTargetTile(pacmanPos : Vector2&) : Vector2
    + getScatterTarget() : Vector2
}

' UI Classes
class Menu {
    - items : vector<string>
    - selectedIndex : int
    - selectedFlag : bool
    
    + Menu(items : vector<string>&)
    + update() : void
    + draw(screenWidth : int, screenHeight : int) : void
    + isSelected() : bool
    + getSelectedIndex() : int
    + reset() : void
}

class Leaderboard {
    - filename : string
    - entries : vector<pair<string,int>>
    
    + Leaderboard(filename : string)
    + ~Leaderboard()
    + addEntry(name : string&, score : int) : void
    + draw(x : int, yStart : int) : void
    + save() : void
    - load() : void
}

' Relationships
Entity <|-- PacMan : extends
Entity <|-- Ghostbase : extends
Ghostbase <|-- RedGhost : extends
Ghostbase <|-- PinkGhost : extends
Ghostbase <|-- GreenGhost : extends
Ghostbase <|-- BlueGhost : extends

Game *-- Map : contains
Game *-- PacMan : contains
Game *-- Menu : contains
Game *-- Leaderboard : contains
Game *-- RedGhost : contains
Game *-- PinkGhost : contains
Game *-- GreenGhost : contains
Game *-- BlueGhost : contains
Game --> GameState : uses

Map --> TileType : uses
Ghostbase --> GhostState : uses
Ghostbase --> Map : references

PacMan --> Map : interacts with
Ghostbase --> Map : interacts with

' Notes
note right of Game : Main game controller that\nmanages all game entities\nand states
note right of Ghostbase : Abstract base class for all ghosts\nwith common AI behavior\nand state management
note right of Map : Handles game world layout,\ncollision detection,\nand item management
note right of Entity : Base class for all\nmovable game objects

note bottom of GhostState : Ghost AI States:\n- IN_BASE: Starting in ghost house\n- SCATTER: Moving to corners\n- CHASE: Pursuing PacMan\n- FRIGHTENED: Vulnerable state\n- EATEN: Returning to spawn

note bottom of GameState : Game Flow States:\n- MENU: Main menu\n- PLAYING: Active gameplay\n- GAMEOVER: End screen\n- ENTERNAME: Score entry\n- LEADERBOARD: High scores

@enduml
